#!/bin/bash
#
# WAM CMIS (providence) deployment script
#
# This script currently only manages code update deployments, and does not handle
# initial setup or updates involving a database migration.
#

# Defaults
clonePath=/data/github/providence
targetParentPath=/data/cmis/collectiveaccess/providence
tagPrefix=wamuseum_
tagName=$(date +%Y%m%d%H%M%S)
symlinkName=current
skipPull=false
skipDeploy=false
skipLink=false
skipRestartServer=false
skipPushTag=false

# Parse parameters
declare -a errors
showHelp=false
for opt in "$@"; do
	case "$opt" in
		-c=*|--clone-path=*)
			clonePath="${opt#*=}"
		;;
		-p=*|--target-parent-path=*)
			targetParentPath="${opt#*=}"
		;;
		-t=*|--tag-name=*)
			tagName="${opt#*=}"
		;;
		-x=*|--tag-prefix=*)
			tagPrefix="${opt#*=}"
		;;
		-s=*|--symlink-name=*)
			symlinkName="${opt#*=}"
		;;
		-P|--skip-pull)
			skipPull=true
		;;
		-D|--skip-deploy)
			skipDeploy=true
		;;
		-L|--skip-link)
			skipLink=true
		;;
		-R|--skip-restart-server)
			skipRestartServer=true
		;;
		-T|--skip-push-tag)
			skipPushTag=true
		;;
		-h|--help)
			showHelp=true
		;;
		*=*)
			errors[${#errors[@]}]="Unrecognised option: ${opt%=*} with value: ${opt#*=}"
		;;
		*)
			errors[${#errors[@]}]="Unrecognised option: $opt with no value"
		;;
	esac
done

# Sanity check options
if [[ "$clonePath" = "" ]]; then
	errors[${#errors[@]}]="Empty clone path specified"
fi
if [[ "$targetParentPath" = "" ]]; then
	errors[${#errors[@]}]="Empty target parent path specified"
fi
if [[ "$tagName" = "" ]]; then
	errors[${#errors[@]}]="Empty tag name specified"
fi
if [[ "$symlinkName" = "" ]]; then
	errors[${#errors[@]}]="Empty symlink name specified"
fi

# Composite variables
targetPath="$targetParentPath/$tagName"
targetSymlinkPath="$targetParentPath/$symlinkName"
tagFullName="$tagPrefix$tagName"

# Path checking
if [ ! -d $clonePath ]; then
    errors[${#errors[@]}]="Cloned repository path does not exist: $clonePath"
fi
if [ ! -d $targetParentPath ]; then
    errors[${#errors[@]}]="Target parent path does not exist: $targetParentPath"
fi
if [ -d $targetPath ]; then
    errors[${#errors[@]}]="Tag directory already exists: $tagName"
fi

# Show errors and/or usage
if [[ ${#errors[@]} > 0 || $showHelp = true ]]; then
	if [[ $showHelp != true ]]; then
		echo "ERRORS:"
		for error in "${errors[@]}"; do
			echo "    $error"
		done
		echo ""
	fi

	cat << ENDHELP
USAGE:
    ${0##*/} [OPTIONS]

OPTIONS:
    -c=<path>, --clone-path=<path>         The path to the local git clone.
    -p=<path>, --target-parent-path=<path> The path containing deployment subdirectories.
    -t=<name>, --tag-name=<name>           The name of the tag, this is used for the local subdir
                                           name and (optionally) to create a tag in the repo.
    -x=<prefix>, --tag-prefix=<prefix>     The prefix to use before the tag name, this is used for
                                           the tag in the repo only (not the local subdir name).
    -s=<name>, --symlink-name=<name>       The name of the symlink to create; this should match
                                           the server configuration.
    -P, --skip-pull                        Don't pull latest changes from upstream repository.
    -D, --skip-deploy                      Don't copy changes from the git clone to the target.
    -L, --skip-link                        Don't create a new link in the target directory.
    -R, --skip-restart-server              Don't restart the web server.
    -T, --skip-push-tag                    Don't create and push a tag in the repository.
    -h, --help                             Show this help text and quit.

ENDHELP
	exit
fi

# Process steps...
if [ $skipPull = false ]; then
	echo "Pulling latest changes from remote git repository..."
	pushd "$clonePath" >/dev/null
	git checkout master
	git pull origin master
	popd >/dev/null
	echo "Done pulling latest changes from remote git repository"
fi

if [ $skipDeploy = false ]; then
	echo "Deploying latest changes to staging directory..."
	cp -R "$targetSymlinkPath/" "$targetPath"
	rsync -a --exclude=".git*" --delete --delete-excluded "$clonePath" "$targetPath"
	echo "Done deploying latest changes to staging directory"
fi

if [ $skipLink = false ]; then
	echo "Linking production to staging directory..."
	if [[ -h $targetSymlinkPath ]]; then  # -h = "exists and is a symbolic link"
		rm $targetSymlinkPath
	fi
	ln -s $targetPath $targetSymlinkPath
	echo "Done linking production to staging directory"
fi

if [ $skipRestartServer = false ]; then
	echo "Restarting web server..."
	sudo service apache2 restart
	echo "Done restarting web server"
fi

if [ $skipPushTag = false ]; then
	echo "Adding a tag for the deployed version..."
	pushd "$clonePath" >/dev/null
	git tag -a "$tagFullName" -m "Tagging $tagFullName [from deployment script, deploy-wamcmis]"
	git push origin "$tagFullName"
	popd >/dev/null
	echo "Done adding a tag for the deployed version"
fi

# $SECONDS is a magic, per-script variable given by bash
echo "DEPLOYMENT COMPLETED IN $SECONDS SECONDS"
