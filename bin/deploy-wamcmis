#!/bin/bash
#
# WAM CMIS (providence) deployment script
#
# This script currently only manages code update deployments, and does not handle
# initial setup or updates involving a database migration.
#

# Halt on any errors
set -e

# Halt on undefined variables
set -u

# Constants
setupFileName=setup.php
mediaSymlinkName=media
configPath=$(dirname $0)/../conf/deploy-wamcmis

# Get mode argument
mode=all
if [[ $# > 0 && ${1::1} != "-" ]]; then
	mode=$1
	shift
fi

# The "all" calls both other modes, and passes all options to both modes
if [[ "$mode" = "all" ]]; then
	$0 providence $@ && $0 cmis-local-conf $@
	exit $?
fi

# Defaults
source $configPath/$mode.conf

# Initial values
repoPath=$defaultRepoPath
remote=$defaultRemote
branch=$defaultBranch
deployPath=$defaultDeployPath
mediaPath=$defaultMediaPath
tagPrefix=$defaultTagPrefix
tagName=$defaultTagName
symlinkName=$defaultSymlinkName
service=$defaultService
skipRepoUpdate=$defaultSkipRepoUpdate
skipDeploy=$defaultSkipDeploy
skipMediaLink=$defaultSkipMediaLink
skipTag=$defaultSkipTag
skipRestartService=$defaultSkipRestartService

# Array for storing error messages
declare -a errors
errors=()

# Parse parameters
showHelp=false
for opt in "$@"; do
	case "$opt" in
		-p=*|--repo-path=*)
			repoPath="${opt#*=}"
		;;
		-r=*|--remote=*)
			remote="${opt#*=}"
		;;
		-b=*|--branch=*)
			branch="${opt#*=}"
		;;
		-d=*|--deploy-path=*)
			deployPath="${opt#*=}"
		;;
		-m=*|--media-path=*)
			mediaPath="${opt#*=}"
		;;
		-t=*|--tag-name=*)
			tagName="${opt#*=}"
		;;
		-x=*|--tag-prefix=*)
			tagPrefix="${opt#*=}"
		;;
		-l=*|--symlink-name=*)
			symlinkName="${opt#*=}"
		;;
		-s=*|--restart-service=*)
			service="${opt#*=}"
		;;
		-P|--skip-repo-update)
			skipRepoUpdate=true
		;;
		-D|--skip-deploy)
			skipDeploy=true
		;;
		-M|--skip-media-link)
			skipMediaLink=true
		;;
		-T|--skip-tag)
			skipTag=true
		;;
		-S|--skip-restart-service)
			skipRestartService=true
		;;
		-h|--help)
			showHelp=true
		;;
		*=*)
			errors[${#errors[@]}]="Unrecognised option: ${opt%=*} with value: ${opt#*=}"
		;;
		*)
			errors[${#errors[@]}]="Unrecognised option: $opt with no value"
		;;
	esac
done

# Sanity check options
if [[ "$repoPath" = "" ]]; then
	errors[${#errors[@]}]="Empty repo path specified"
fi
if [[ "$remote" = "" ]]; then
	errors[${#errors[@]}]="Empty remote repository specified"
fi
if [[ "$branch" = "" ]]; then
	errors[${#errors[@]}]="Empty branch name specified"
fi
if [[ "$deployPath" = "" ]]; then
	errors[${#errors[@]}]="Empty deploy path specified"
fi
if [[ "$skipMediaLink" != true && "$mediaPath" = "" ]]; then
	errors[${#errors[@]}]="Empty media path specified, use -M to skip linking to an external media location"
fi
if [[ "$skipTag" != true && "$tagName" = "" ]]; then
	errors[${#errors[@]}]="Empty tag name specified, use -T to skip tagging"
fi
if [[ "$symlinkName" = "" ]]; then
	errors[${#errors[@]}]="Empty symlink name specified, this should match external configuration"
fi
if [[ "$skipRestartService" != true ]]; then
	if [[ "$service" = "" ]]; then
		errors[${#errors[@]}]="Empty service name specified, use -R to skip restarting service"
	elif [ ! -e "/etc/init.d/$service" ]; then
		errors[${#errors[@]}]="Non-existent service name '$service' specified, use -R to skip restarting service"
	fi
fi

# Composite variables
deployStagePath="$deployPath/$tagName"
deploySymlinkPath="$deployPath/$symlinkName"
tagFullName="$tagPrefix$tagName"

# Path checking
if [[ ! -d $repoPath ]]; then
	errors[${#errors[@]}]="Repository path does not exist: $repoPath"
fi
if [[ ! -d $deployPath ]]; then
	errors[${#errors[@]}]="Deploy path does not exist: $deployPath"
fi
if [[ "$skipMediaLink" != true && ! -d $mediaPath ]]; then
	errors[${#errors[@]}]="Media path does not exist: $mediaPath"
fi
if [[ -d $deployStagePath ]]; then
	errors[${#errors[@]}]="Stage path already exists: $deployStagePath"
fi

# Show errors and/or usage
if [[ ${#errors[@]} > 0 || $showHelp = true ]]; then
	if [[ $showHelp != true ]]; then
		echo "ERRORS:"
		for error in "${errors[@]}"; do
			echo "    $error"
		done
		echo ""
	fi

	cat << ENDHELP
USAGE:
    ${0##*/} [MODE] [OPTIONS]

MODE:
	The mode sets the defaults for all of the options:

	providence         Deploy the software code for providence
	cmis-local-conf    Deploy the local configuration
	all                Deploy both providence and local configuration

	The "all" mode, which is the default, is a synonym for running the
	"providence" mode followed if successful by the "cmis-local-conf" mode.

OPTIONS:
    Defaults shown here in (parentheses) are for the current mode ($mode):

    -p, --repo-path=PATH          Path to the local git repository
                                  ($defaultRepoPath)
    -r, --remote=REMOTE           Remote repository to pull updates from
                                  ($defaultRemote)
    -b, --branch=BRANCH           Branch to check out before retrieving updates
                                  ($defaultBranch)
    -d, --deploy-path=PATH        Path containing deployment directories
                                  ($defaultDeployPath)
    -m, --media-path=PATH         Path to the media directory
                                  ($defaultMediaPath)
    -t, --tag-name=NAME           Name of the tag, this is used for the local
                                  subdir name and (optionally) to create a tag
                                  in the repo (defaults to current date)
    -x, --tag-prefix=PREFIX       Prefix to use before the tag name, this is
                                  used for tag name only ($defaultTagPrefix)
    -l, --symlink-name=NAME       Name of the symlink to create; this should
                                  match external configuration ($defaultSymlinkName)
    -s, --restart-service=SERVICE Name of service to restart ($defaultService)
    -P, --skip-repo-update        Don't pull latest changes from upstream
                                  repository ($defaultSkipRepoUpdate)
    -D, --skip-deploy             Don't deploy changes into "live" directories
                                  ($defaultSkipDeploy)
    -M, --skip-media-link         Don't create a link to external media path,
                                  use new directory under deployment path ($defaultSkipMediaLink)
    -T, --skip-tag                Don't create and push a tag ($defaultSkipTag)
    -S, --skip-restart-server     Don't restart any service ($defaultSkipRestartService)
    -h, --help                    Show this help text and quit

ENDHELP
	exit 1
fi

echo "******** DEPLOYING $mode ********" | tr '[:lower:]' '[:upper:]'

# Pull changes from remote repository
if [[ "$skipRepoUpdate" != true ]]; then
	echo "Pulling latest changes from branch '$branch' on remote '$remote' into repository '$repoPath'..."

	pushd "$repoPath" >/dev/null
	git checkout $branch
	git pull $remote $branch
	popd >/dev/null

	echo "Done pulling latest changes"
fi

# Deploy to live directory
if [[ "$skipDeploy" != true ]]; then
	echo "Deploying latest changes to '$deployStagePath'..."

	rsync -a --exclude=".git*" "$repoPath/" "$deployStagePath"
	if [[ -e "$deploySymlinkPath/$setupFileName" ]]; then
		echo "Copying current $setupFileName into stage path"
		cp "$deploySymlinkPath/$setupFileName" "$deployStagePath"
	fi
	if [[ -h $deploySymlinkPath ]]; then
		echo "Removing old symlink"
		rm $deploySymlinkPath
	fi
	ln -s "$deployStagePath" "$deploySymlinkPath"

	echo "Done deploying latest changes..."
fi

# Setup external media directory
if [[ "$skipMediaLink" != true ]]; then
	echo "Linking to external media path '$mediaPath'..."

	rm -fR "$deployStagePath/$mediaSymlinkName"
	ln -s "$mediaPath" "$deployStagePath/$mediaSymlinkName"

	echo "Done linking to external media path..."
fi

# Restart service
if [[ $skipRestartService != true ]]; then
	echo "Restarting service '$service'..."

	sudo service $service restart

	echo "Done restarting service $service"
fi

# Tag and push to remote repository
if [[ $skipTag != true ]]; then
	echo "Adding tag '$tagFullName' for the deployed version and pushing tag to remote '$remote'..."

	pushd "$repoPath" >/dev/null
	git tag -a "$tagFullName" -m "Tagging $tagFullName [from deployment script $0]"
	git push $remote "$tagFullName"
	popd >/dev/null

	echo "Done adding tag for the deployed version"
fi

echo "******** $mode DEPLOYMENT COMPLETED IN $SECONDS SECONDS ********" | tr '[:lower:]' '[:upper:]'
