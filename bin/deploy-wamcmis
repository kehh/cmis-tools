#!/bin/bash
#
# WAM CMIS (providence) deployment script
#
# This script currently only manages code update deployments, and does not handle
# initial setup or updates involving a database migration.
#

# Halt on any errors or undefined variables
set -e
set -u

# Constants
setupFileName=setup.php
importsSetupFileName=setup.imports.php
mediaSymlinkName=media
importSymlinkName=import
configPath=$(dirname $0)/../conf/deploy-wamcmis

# Get mode argument
mode=all
if [[ $# > 0 && ${1::1} != "-" ]]; then
	mode=$1
	shift
fi

# The "all" calls both other modes, and passes all options to both modes
if [[ "$mode" = "all" ]]; then
	$0 providence $@ && $0 cmis-local-conf $@
	exit $?
fi

# Defaults
source $configPath/$mode.conf

# Initial values
repoPath=$defaultRepoPath
remote=$defaultRemote
branch=$defaultBranch
deployPath=$defaultDeployPath
mediaPath=$defaultMediaPath
importPath=$defaultImportPath
tagPrefix=$defaultTagPrefix
tagName=$defaultTagName
symlinkName=$defaultSymlinkName
service=$defaultService
skipRepoUpdate=$defaultSkipRepoUpdate
skipDeploy=$defaultSkipDeploy
skipMediaLink=$defaultSkipMediaLink
skipImportLink=$defaultSkipImportLink
skipTag=$defaultSkipTag
skipRestartService=$defaultSkipRestartService

# Array for storing error messages
declare -a errors
errors=()

# Parse parameters
showHelp=false
while getopts :p:r:b:d:m:i:t:x:l:s:PDMITSh OPTION; do
	case "$OPTION" in
		p)
			repoPath="$OPTARG"
		;;
		r)
			remote="$OPTARG"
		;;
		b)
			branch="$OPTARG"
		;;
		d)
			deployPath="$OPTARG"
		;;
		m)
			mediaPath="$OPTARG"
		;;
		i)
			importPath="$OPTARG"
		;;
		t)
			tagName="$OPTARG"
		;;
		x)
			tagPrefix="$OPTARG"
		;;
		l)
			symlinkName="$OPTARG"
		;;
		s)
			service="$OPTARG"
		;;
		P)
			skipRepoUpdate=true
		;;
		D)
			skipDeploy=true
		;;
		M)
			skipMediaLink=true
		;;
		I)
			skipImportLink=true
		;;
		T)
			skipTag=true
		;;
		S)
			skipRestartService=true
		;;
		h)
			showHelp=true
		;;
		*)
			errors[${#errors[@]}]="Unrecognised option: $OPTARG"
		;;
	esac
done

# Sanity check options
if [[ "$repoPath" = "" ]]; then
	errors[${#errors[@]}]="Empty repo path specified"
fi
if [[ "$remote" = "" ]]; then
	errors[${#errors[@]}]="Empty remote repository specified"
fi
if [[ "$branch" = "" ]]; then
	errors[${#errors[@]}]="Empty branch name specified"
fi
if [[ "$deployPath" = "" ]]; then
	errors[${#errors[@]}]="Empty deploy path specified"
fi
if [[ "$skipMediaLink" != true && "$mediaPath" = "" ]]; then
	errors[${#errors[@]}]="Empty media path specified, use -M to skip linking to an external media path"
fi
if [[ "$skipImportLink" != true && "$importPath" = "" ]]; then
	errors[${#errors[@]}]="Empty import path specified, use -I to skip linking to an external import path"
fi
if [[ "$skipTag" != true && "$tagName" = "" ]]; then
	errors[${#errors[@]}]="Empty tag name specified, use -T to skip tagging"
fi
if [[ "$symlinkName" = "" ]]; then
	errors[${#errors[@]}]="Empty symlink name specified, this should match external configuration"
fi
if [[ "$skipRestartService" != true ]]; then
	if [[ "$service" = "" ]]; then
		errors[${#errors[@]}]="Empty service name specified, use -S to skip restarting service"
	elif [ ! -e "/etc/init.d/$service" ]; then
		errors[${#errors[@]}]="Non-existent service name '$service' specified, use -S to skip restarting service"
	fi
fi

# Composite variables
deployStagePath="$deployPath/$tagName"
deploySymlinkPath="$deployPath/$symlinkName"
tagFullName="$tagPrefix$tagName"

# Path checking
if [[ ! -d $repoPath ]]; then
	errors[${#errors[@]}]="Repository path does not exist: $repoPath, use -r to use a different path"
fi
if [[ ! -d $deployPath ]]; then
	errors[${#errors[@]}]="Deploy path does not exist: $deployPath, use -d to use a different path"
fi
if [[ "$skipMediaLink" != true && ! -d $mediaPath ]]; then
	errors[${#errors[@]}]="Media path does not exist: $mediaPath, use -m to use a different path, or -M to skip linking to an external media path"
fi
if [[ "$skipImportLink" != true && ! -d $importPath ]]; then
	errors[${#errors[@]}]="Import path does not exist: $importPath, use -i to use a different path, or -I to skip linking to an external import path"
fi
if [[ -d $deployStagePath ]]; then
	errors[${#errors[@]}]="Stage path already exists: $deployStagePath, use -d to use a different deployment path, or -t to use a different tag name"
fi

# Show errors and/or usage
if [[ ${#errors[@]} > 0 || $showHelp = true ]]; then
	if [[ $showHelp != true ]]; then
		echo "ERRORS:"
		for error in "${errors[@]}"; do
			echo "    $error"
		done
		echo ""
	fi

	cat << ENDHELP
USAGE:
    ${0##*/} [MODE] [OPTIONS]

MODE:
    The mode sets the defaults for all of the options:

    providence         Deploy the software code for providence
    cmis-local-conf    Deploy the local configuration
    all                Deploy both providence and local configuration

    The "all" mode, which is the default, is a synonym for running the
    "providence" mode followed if successful by the "cmis-local-conf" mode.

OPTIONS:
    Defaults shown here in (parentheses) are for the current mode ($mode):

    -p PATH    Path to the local git repository ($defaultRepoPath)
    -r REMOTE  Remote repository to pull updates from ($defaultRemote)
    -b BRANCH  Branch to check out before retrieving updates ($defaultBranch)
    -d PATH    Path containing deployment directories ($defaultDeployPath)
    -m PATH    Path to the media directory ($defaultMediaPath)
    -i PATH    Path to the import directory ($defaultImportPath)
    -t NAME    Name of the tag, this is used for the local subdir name and
               (optionally) to create a tag in the repo ($defaultTagName)
    -x PREFIX  Prefix to use before the tag name, this is used for tag name only
               ($defaultTagPrefix)
    -l NAME    Name of the symlink to create; this should match external
               configuration ($defaultSymlinkName)
    -s SERVICE Name of service to restart ($defaultService)
    -P         Don't pull latest changes from upstream repository ($defaultSkipRepoUpdate)
    -D         Don't deploy changes into "live" directories ($defaultSkipDeploy)
    -M         Don't create a link to external media path, use new directory
               under deployment path ($defaultSkipMediaLink)
    -I         Don't create a link to external import path, use new directory
               under deployment path ($defaultSkipImportLink)
    -T         Don't create and push a tag ($defaultSkipTag)
    -S         Don't restart any service ($defaultSkipRestartService)
    -h         Show this help text and quit

ENDHELP
	exit 1
fi

echo "******** DEPLOYING $mode ********" | tr '[:lower:]' '[:upper:]'

# Pull changes from remote repository
if [[ "$skipRepoUpdate" != true ]]; then
	echo "Pulling latest changes from branch '$branch' on remote '$remote' into repository '$repoPath'..."
	pushd "$repoPath" >/dev/null
	git fetch
	git checkout $branch
	git pull $remote $branch
	popd >/dev/null
	echo "Done pulling latest changes"
fi

# Deploy to live directory
if [[ "$skipDeploy" != true ]]; then
	echo "Deploying latest changes to '$deployStagePath'..."
	rsync -a --exclude=".git*" "$repoPath/" "$deployStagePath"
	if [[ -e "$deploySymlinkPath/$setupFileName" ]]; then
		echo "Copying current $setupFileName into stage path"
		cp "$deploySymlinkPath/$setupFileName" "$deployStagePath"
	fi
	if [[ -e "$deploySymlinkPath/$importsSetupFileName" ]]; then
		echo "Copying current $importsSetupFileName into stage path"
		cp "$deploySymlinkPath/$importsSetupFileName" "$deployStagePath"
	fi
	if [[ -h $deploySymlinkPath ]]; then
		echo "Removing old symlink"
		rm $deploySymlinkPath
	fi
	ln -s "$deployStagePath" "$deploySymlinkPath"
	echo "Done deploying latest changes..."
fi

# Setup external media directory
if [[ "$skipMediaLink" != true ]]; then
	echo "Linking to external media path '$mediaPath'..."
	rm -fR "$deployStagePath/$mediaSymlinkName"
	ln -s "$mediaPath" "$deployStagePath/$mediaSymlinkName"
	echo "Done linking to external media path..."
fi

# Setup external import directory
if [[ "$skipImportLink" != true ]]; then
	echo "Linking to external import path '$importPath'..."

	rm -fR "$deployStagePath/$importSymlinkName"
	ln -s "$importPath" "$deployStagePath/$importSymlinkName"

	echo "Done linking to external import path..."
fi

# Restart service
if [[ $skipRestartService != true ]]; then
	echo "Restarting service '$service'..."
	sudo service $service restart
	echo "Done restarting service $service"
fi

# Tag and push to remote repository
if [[ $skipTag != true ]]; then
	echo "Adding tag '$tagFullName' for the deployed version and pushing tag to remote '$remote'..."
	pushd "$repoPath" >/dev/null
	git tag -a "$tagFullName" -m "Tagging $tagFullName [from deployment script $0]"
	git push $remote "$tagFullName"
	popd >/dev/null
	echo "Done adding tag for the deployed version"
fi

# Do a `git fetch` to fix weird issue with local branch being ahead
echo "Cleaning up..."
pushd "$repoPath" >/dev/null
git fetch
popd >/dev/null
echo "Done cleaning up"

# Done
echo "******** $mode DEPLOYMENT COMPLETED IN $SECONDS SECONDS ********" | tr '[:lower:]' '[:upper:]'

