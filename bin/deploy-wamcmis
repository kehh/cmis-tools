#!/bin/bash
#
# WAM CMIS (providence) deployment script
#
# This script currently only manages code update deployments, and does not handle
# initial setup or updates involving a database migration.
#

# Halt on any errors
set -e

# Halt on undefined variables
set -u

# Constants
setupFileName=setup.php
mediaSymlinkName=media

# Defaults
defaultClonePath=/data/github/providence
defaultTargetParentPath=/data/cmis/collectiveaccess/providence
defaultMediaPath=/data/cmis/collectiveaccess/media
defaultBranch=develop
defaultTagPrefix=wamuseum_
defaultTagName=$(date +%Y%m%d%H%M%S)
defaultSymlinkName=current
defaultService=php5-fpm

# Initial values
clonePath=$defaultClonePath
targetParentPath=$defaultTargetParentPath
mediaPath=$defaultMediaPath
branch=$defaultBranch
tagPrefix=$defaultTagPrefix
tagName=$defaultTagName
symlinkName=$defaultSymlinkName
service=$defaultService

skipPull=false
skipDeploy=false
skipLink=false
skipRestartService=false
skipPushTag=false

# Array for storing error messages
declare -a errors
errors=()

# Parse parameters
showHelp=false
for opt in "$@"; do
	case "$opt" in
		-c=*|--clone-path=*)
			clonePath="${opt#*=}"
		;;
		-p=*|--target-parent-path=*)
			targetParentPath="${opt#*=}"
		;;
		-m=*|--media-path=*)
			mediaPath="${opt#*=}"
		;;
		-b=*|--branch=*)
			branch="${opt#*=}"
		;;
		-t=*|--tag-name=*)
			tagName="${opt#*=}"
		;;
		-x=*|--tag-prefix=*)
			tagPrefix="${opt#*=}"
		;;
		-s=*|--symlink-name=*)
			symlinkName="${opt#*=}"
		;;
		-r=*|--restart-service=*)
			service="${opt#*=}"
		;;
		-P|--skip-pull)
			skipPull=true
		;;
		-D|--skip-deploy)
			skipDeploy=true
		;;
		-L|--skip-link)
			skipLink=true
		;;
		-R|--skip-restart-service)
			skipRestartService=true
		;;
		-T|--skip-push-tag)
			skipPushTag=true
		;;
		-h|--help)
			showHelp=true
		;;
		*=*)
			errors[${#errors[@]}]="Unrecognised option: ${opt%=*} with value: ${opt#*=}"
		;;
		*)
			errors[${#errors[@]}]="Unrecognised option: $opt with no value"
		;;
	esac
done

# Sanity check options
if [[ "$clonePath" = "" ]]; then
	errors[${#errors[@]}]="Empty clone path specified"
fi
if [[ "$targetParentPath" = "" ]]; then
	errors[${#errors[@]}]="Empty target parent path specified"
fi
if [[ "$mediaPath" = "" ]]; then
	errors[${#errors[@]}]="Empty media path specified"
fi
if [[ "$branch" = "" ]]; then
	errors[${#errors[@]}]="Empty branch name specified"
fi
if [[ ! $skipPushTag && "$tagName" = "" ]]; then
	errors[${#errors[@]}]="Empty tag name specified, use -T to skip tagging"
fi
if [[ ! $skipLink && "$symlinkName" = "" ]]; then
	errors[${#errors[@]}]="Empty symlink name specified, use -L to skip linking"
fi
if [[ ! $skipRestartService ]]; then
	if [[ "$service" = "" ]]; then
		errors[${#errors[@]}]="Empty service name specified, use -R to skip restarting service"
	elif [ ! -e "/etc/init.d/$service" ]; then
		errors[${#errors[@]}]="Non-existent service name '$service' specified, use -R to skip restarting service"
	fi
fi

# Composite variables
targetPath="$targetParentPath/$tagName"
targetSymlinkPath="$targetParentPath/$symlinkName"
tagFullName="$tagPrefix$tagName"

# Path checking
if [ ! -d $clonePath ]; then
	errors[${#errors[@]}]="Cloned repository path does not exist: $clonePath"
fi
if [ ! -d $targetParentPath ]; then
	errors[${#errors[@]}]="Target parent path does not exist: $targetParentPath"
fi
if [ ! -d $mediaPath ]; then
	errors[${#errors[@]}]="Media path does not exist: $mediaPath"
fi
if [ -d $targetPath ]; then
	errors[${#errors[@]}]="Tag directory already exists: $tagName"
fi

# Show errors and/or usage
if [[ ${#errors[@]} > 0 || $showHelp = true ]]; then
	if [[ $showHelp != true ]]; then
		echo "ERRORS:"
		for error in "${errors[@]}"; do
			echo "    $error"
		done
		echo ""
	fi

	cat << ENDHELP
USAGE:
    ${0##*/} [OPTIONS]

OPTIONS:
    -c, --clone-path=PATH         Path to the local git clone
                                  ($defaultClonePath)
    -p, --target-parent-path=PATH Path containing deployment subdirs
                                  ($defaultTargetParentPath)
    -m, --media-path=PATH         Path to the media directory
                                  ($defaultMediaPath)
    -b, --branch=BRANCH           Branch to check out before retrieving updates
                                  from remote repository ($defaultBranch)
    -t, --tag-name=NAME           Name of the tag, this is used for the local
                                  subdir name and (optionally) to create a tag
                                  in the repo (defaults to current date)
    -x, --tag-prefix=PREFIX       Prefix to use before the tag name, this is
                                  used for tag name only ($defaultTagPrefix)
    -s, --symlink-name=NAME       Name of the symlink to create; this should
                                  match server configuration ($defaultSymlinkName)
    -r, --restart-service=SERVICE Name of service to restart ($defaultService)
    -P, --skip-pull               Don't pull latest changes from upstream
    -D, --skip-deploy             Don't copy changes from clone to target
    -L, --skip-link               Don't create a new link in target directory
    -R, --skip-restart-server     Don't restart any service
    -T, --skip-push-tag           Don't create and push a tag
    -h, --help                    Show this help text and quit

ENDHELP
	exit
fi

# Process steps...
if [ $skipPull = false ]; then
	echo "Pulling latest changes from remote git repository..."
	pushd "$clonePath" >/dev/null
	git checkout $branch
	git pull origin $branch
	popd >/dev/null
	echo "Done pulling latest changes from remote git repository"
fi

if [ $skipDeploy = false ]; then
	echo "Deploying latest changes to staging directory..."
	rsync -a --exclude=".git*" "$clonePath/" "$targetPath"
	echo "Done deploying latest changes to staging directory"
fi

if [ $skipLink = false ]; then
	echo "Linking production to staging directory..."
	# Link to the setup.php file, skipped if it doesn't exist
	if [[ -e "$targetSymlinkPath/$setupFileName" ]]; then
		cp "$targetSymlinkPath/$setupFileName" "$targetPath"
	fi
	# Remove existing media directory, and create link to real media directory, which we already know exists
	rm -fR "$targetPath/$mediaSymlinkName"
	ln -s "$mediaPath" "$targetPath/$mediaSymlinkName"
	# Remove any existing target symlink, and create a new one
	if [[ -h $targetSymlinkPath ]]; then
		rm $targetSymlinkPath
	fi
	ln -s "$targetPath" "$targetSymlinkPath"
	echo "Done linking production to staging directory"
fi

if [ $skipRestartService = false ]; then
	echo "Restarting service $service..."
	sudo service $service restart
	echo "Done restarting service $service"
fi

if [ $skipPushTag = false ]; then
	echo "Adding a tag for the deployed version..."
	pushd "$clonePath" >/dev/null
	git tag -a "$tagFullName" -m "Tagging $tagFullName [from deployment script, deploy-wamcmis]"
	git push origin "$tagFullName"
	popd >/dev/null
	echo "Done adding a tag for the deployed version"
fi

# $SECONDS is a magic, per-script variable given by bash
echo "DEPLOYMENT COMPLETED IN $SECONDS SECONDS"

